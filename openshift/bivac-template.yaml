apiVersion: v1
kind: Template
labels:
  app: bivac
metadata:
  name: bivac
  annotations:
    description: "Bivac lets you backup all your containers volumes deployed on Docker Engine or Kubernetes using Restic, Duplicity or RClone."
    tags: "backup,duplicity,restic,rclone,volume"
objects:
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    name: ${APP_NAME}
  spec:
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
    schedule: "${SCHEDULE}"
    concurrencyPolicy: Forbid
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP_NAME}
          spec:
            serviceAccountName: ${APP_NAME}
            containers:
              - name: bivac
                image: "${BIVAC_IMAGE}"
                imagePullPolicy: Always
                env:
                  - name: BIVAC_ORCHESTRATOR
                    value: kubernetes
                  - name: BIVAC_TARGET_URL
                    value: ${BIVAC_TARGET_URL}
                  - name: AWS_ACCESS_KEY_ID
                    value: ${AWS_ACCESS_KEY_ID}
                  - name: AWS_SECRET_ACCESS_KEY
                    value: ${AWS_SECRET_ACCESS_KEY}
                  - name: SWIFT_USERNAME
                    value: ${SWIFT_USERNAME}
                  - name: SWIFT_PASSWORD
                    value: ${SWIFT_PASSWORD}
                  - name: SWIFT_AUTHURL
                    value: ${SWIFT_AUTHURL}
                  - name: SWIFT_TENANTNAME
                    value: ${SWIFT_TENANTNAME}
                  - name: SWIFT_REGIONNAME
                    value: ${SWIFT_REGIONNAME}
                  - name: RESTIC_PASSWORD
                    value: ${RESTIC_PASSWORD}
                  - name: K8S_WORKER_SERVICE_ACCOUNT
                    value: ${K8S_WORKER_SERVICE_ACCOUNT}
                volumeMounts:
                  - name: providers-config
                    mountPath: /providers-config.default.toml
                    subPath: providers-config.default.toml
            volumes:
              - name: providers-config
                configMap:
                  name: ${APP_NAME}
                  items:
                    - key: providers-config
                      path: providers-config.default.toml
            restartPolicy: OnFailure
- kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: ${APP_NAME}
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - pods/log
    - pods/exec
    verbs:
    - get
    - post
    - create
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${APP_NAME}
- kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: ${APP_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: ${APP_NAME}
  subjects:
  - kind: ServiceAccount
    name: ${APP_NAME}
    namespace: ${NAMESPACE}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
  data:
    providers-config: |-
      [providers]
        [providers.mysql]
        pre_cmd = """${MYSQL_PRE_CMD}"""
        detect_cmd = """${MYSQL_DETECT_CMD}"""
        post_cmd = """${MYSQL_POST_CMD}"""
        backup_dir = "${MYSQL_BACKUP_DIR}"

        [providers.postgresql]
        pre_cmd = """${POSTGRES_PRE_CMD}"""
        post_cmd = """${POSTGRES_POST_CMD}"""
        detect_cmd = """${POSTGRES_DETECT_CMD}"""
        backup_dir = "${POSTGRES_BACKUP_DIR}"

        [providers.openldap]
        pre_cmd = """${LDAP_PRE_CMD}"""
        post_cmd = """${LDAP_POST_CMD}"""
        detect_cmd = """${LDAP_DETECT_CMD}"""
        backup_dir = "${LDAP_BACKUP_DIR}"

parameters:
- name: APP_NAME
  description: Name use for all bivac objects. This name should be unique across project.
  value: bivac
- name: BIVAC_IMAGE
  description: Name of bivac docker image to use, including tag.
  value: 'camptocamp/bivac:latest'
- name: SCHEDULE
  description: "Cron format schedule specification. Ex: '0 * * * *' backup every hour."
  value: "0 2 * * *"
- name: BIVAC_TARGET_URL
  description: The target URL to push backup to.
- name: AWS_ACCESS_KEY_ID
  description: The AWS access key ID (optional).
  value: ""
- name: AWS_SECRET_ACCESS_KEY
  description: The AWS secret access key (optional).
  value: ""
- name: SWIFT_USERNAME
  description: The Swift user name (optional).
  value: ""
- name: SWIFT_PASSWORD
  description: The Swift password (optional).
  value: ""
- name: SWIFT_AUTHURL
  description: The Swift auth URL (optional).
  value: ""
- name: SWIFT_TENANTNAME
  description: The Swift tenant name (optional).
  value: ""
- name: SWIFT_REGIONNAME
  description: The Swift region name (optional).
  value: ""
- name: RESTIC_PASSWORD
  description: The restic backup password.
- name: K8S_WORKER_SERVICE_ACCOUNT
  description: Kubernetes service account to use for workers.
  value: bivac
- name: NAMESPACE
  description: Openshift project name (namespace)
- name: MYSQL_PRE_CMD
  description: command to prepare backup on MySQL
  value: |-
    mkdir -p $volume/backups && \
    echo $(if [ -z '$MYSQL_ROOT_PASSWORD' ]; then \
      mysqldump --all-databases --extended-insert --user=$MYSQL_USER --password=$MYSQL_PASSWORD; else \
      mysqldump --all-databases --extended-insert --password=$MYSQL_ROOT_PASSWORD; \
    fi) > $volume/backups/all.sql
- name: MYSQL_DETECT_CMD
  description: Command to detect MySQL database
  value: "[[ -d $volume/mysql ]]"
- name: MYSQL_POST_CMD
  description: Command run after backup
  value: ""
- name: MYSQL_BACKUP_DIR
  description: Directory that contains database dump, relative to volume root
  value: "backups"
- name: POSTGRES_PRE_CMD
  description: command to prepare backup on Postgres
  value: |-
    mkdir -p $volume/backups && pg_dumpall --clean -Upostgres > $volume/backups/all.sql
- name: POSTGRES_DETECT_CMD
  description: Command to detect Postgres database
  value: "[[ -f $volume/PG_VERSION ]]"
- name: POSTGRES_POST_CMD
  description: Command run after backup
  value: ""
- name: POSTGRES_BACKUP_DIR
  description: Directory that contains database dump, relative to volume root
  value: "backups"
- name: LDAP_PRE_CMD
  description: command to prepare backup on OpenLdap
  value: |-
    mkdir -p $volume/backups && slapcat > $volume/backups/all.ldif
- name: LDAP_DETECT_CMD
  description: Command to detect OpenLdap database
  value: "[[ -f $volume/DB_CONFIG ]]"
- name: LDAP_POST_CMD
  description: Command run after backup
  value: ""
- name: LDAP_BACKUP_DIR
  description: Directory that contains database dump, relative to volume root
  value: "backups"
