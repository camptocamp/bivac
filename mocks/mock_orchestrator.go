// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/orchestrators/orchestrators.go

// Package mocks is a generated GoMock package.
package mocks

import (
	volume "github.com/camptocamp/bivac/pkg/volume"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrchestrator is a mock of Orchestrator interface
type MockOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorMockRecorder
}

// MockOrchestratorMockRecorder is the mock recorder for MockOrchestrator
type MockOrchestratorMockRecorder struct {
	mock *MockOrchestrator
}

// NewMockOrchestrator creates a new mock instance
func NewMockOrchestrator(ctrl *gomock.Controller) *MockOrchestrator {
	mock := &MockOrchestrator{ctrl: ctrl}
	mock.recorder = &MockOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrchestrator) EXPECT() *MockOrchestratorMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockOrchestrator) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockOrchestratorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockOrchestrator)(nil).GetName))
}

// GetPath mocks base method
func (m *MockOrchestrator) GetPath(v *volume.Volume) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath", v)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockOrchestratorMockRecorder) GetPath(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockOrchestrator)(nil).GetPath), v)
}

// GetVolumes mocks base method
func (m *MockOrchestrator) GetVolumes(volumeFilters volume.Filters) ([]*volume.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", volumeFilters)
	ret0, _ := ret[0].([]*volume.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes
func (mr *MockOrchestratorMockRecorder) GetVolumes(volumeFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockOrchestrator)(nil).GetVolumes), volumeFilters)
}

// DeployAgent mocks base method
func (m *MockOrchestrator) DeployAgent(image string, cmd, envs []string, volume *volume.Volume) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployAgent", image, cmd, envs, volume)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeployAgent indicates an expected call of DeployAgent
func (mr *MockOrchestratorMockRecorder) DeployAgent(image, cmd, envs, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployAgent", reflect.TypeOf((*MockOrchestrator)(nil).DeployAgent), image, cmd, envs, volume)
}

// GetContainersMountingVolume mocks base method
func (m *MockOrchestrator) GetContainersMountingVolume(v *volume.Volume) ([]*volume.MountedVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersMountingVolume", v)
	ret0, _ := ret[0].([]*volume.MountedVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersMountingVolume indicates an expected call of GetContainersMountingVolume
func (mr *MockOrchestratorMockRecorder) GetContainersMountingVolume(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersMountingVolume", reflect.TypeOf((*MockOrchestrator)(nil).GetContainersMountingVolume), v)
}

// ContainerExec mocks base method
func (m *MockOrchestrator) ContainerExec(mountedVolumes *volume.MountedVolume, command []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExec", mountedVolumes, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExec indicates an expected call of ContainerExec
func (mr *MockOrchestratorMockRecorder) ContainerExec(mountedVolumes, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExec", reflect.TypeOf((*MockOrchestrator)(nil).ContainerExec), mountedVolumes, command)
}

// IsNodeAvailable mocks base method
func (m *MockOrchestrator) IsNodeAvailable(hostID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeAvailable", hostID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNodeAvailable indicates an expected call of IsNodeAvailable
func (mr *MockOrchestratorMockRecorder) IsNodeAvailable(hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeAvailable", reflect.TypeOf((*MockOrchestrator)(nil).IsNodeAvailable), hostID)
}

// RetrieveOrphanAgents mocks base method
func (m *MockOrchestrator) RetrieveOrphanAgents() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveOrphanAgents")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveOrphanAgents indicates an expected call of RetrieveOrphanAgents
func (mr *MockOrchestratorMockRecorder) RetrieveOrphanAgents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveOrphanAgents", reflect.TypeOf((*MockOrchestrator)(nil).RetrieveOrphanAgents))
}

// AttachOrphanAgent mocks base method
func (m *MockOrchestrator) AttachOrphanAgent(containerID, namespace string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachOrphanAgent", containerID, namespace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AttachOrphanAgent indicates an expected call of AttachOrphanAgent
func (mr *MockOrchestratorMockRecorder) AttachOrphanAgent(containerID, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachOrphanAgent", reflect.TypeOf((*MockOrchestrator)(nil).AttachOrphanAgent), containerID, namespace)
}
