// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrators/docker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	filters "github.com/docker/docker/api/types/filters"
	network "github.com/docker/docker/api/types/network"
	volume "github.com/docker/docker/api/types/volume"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	io "io"
	reflect "reflect"
)

// Docker is a mock of dockerInterface interface
type Docker struct {
	ctrl     *gomock.Controller
	recorder *DockerMockRecorder
}

// DockerMockRecorder is the mock recorder for Docker
type DockerMockRecorder struct {
	mock *Docker
}

// NewDocker creates a new mock instance
func NewDocker(ctrl *gomock.Controller) *Docker {
	mock := &Docker{ctrl: ctrl}
	mock.recorder = &DockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Docker) EXPECT() *DockerMockRecorder {
	return m.recorder
}

// VolumeInspect mocks base method
func (m *Docker) VolumeInspect(arg0 context.Context, arg1 string) (types.Volume, error) {
	ret := m.ctrl.Call(m, "VolumeInspect", arg0, arg1)
	ret0, _ := ret[0].(types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeInspect indicates an expected call of VolumeInspect
func (mr *DockerMockRecorder) VolumeInspect(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeInspect", reflect.TypeOf((*Docker)(nil).VolumeInspect), arg0, arg1)
}

// VolumeList mocks base method
func (m *Docker) VolumeList(arg0 context.Context, arg1 filters.Args) (volume.VolumesListOKBody, error) {
	ret := m.ctrl.Call(m, "VolumeList", arg0, arg1)
	ret0, _ := ret[0].(volume.VolumesListOKBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList
func (mr *DockerMockRecorder) VolumeList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*Docker)(nil).VolumeList), arg0, arg1)
}

// ContainerCreate mocks base method
func (m *Docker) ContainerCreate(arg0 context.Context, arg1 *container.Config, arg2 *container.HostConfig, arg3 *network.NetworkingConfig, arg4 string) (container.ContainerCreateCreatedBody, error) {
	ret := m.ctrl.Call(m, "ContainerCreate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate
func (mr *DockerMockRecorder) ContainerCreate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*Docker)(nil).ContainerCreate), arg0, arg1, arg2, arg3, arg4)
}

// ContainerStart mocks base method
func (m *Docker) ContainerStart(arg0 context.Context, arg1 string, arg2 types.ContainerStartOptions) error {
	ret := m.ctrl.Call(m, "ContainerStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart
func (mr *DockerMockRecorder) ContainerStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*Docker)(nil).ContainerStart), arg0, arg1, arg2)
}

// ContainerInspect mocks base method
func (m *Docker) ContainerInspect(arg0 context.Context, arg1 string) (types.ContainerJSON, error) {
	ret := m.ctrl.Call(m, "ContainerInspect", arg0, arg1)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerInspect indicates an expected call of ContainerInspect
func (mr *DockerMockRecorder) ContainerInspect(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerInspect", reflect.TypeOf((*Docker)(nil).ContainerInspect), arg0, arg1)
}

// ContainerLogs mocks base method
func (m *Docker) ContainerLogs(arg0 context.Context, arg1 string, arg2 types.ContainerLogsOptions) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "ContainerLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerLogs indicates an expected call of ContainerLogs
func (mr *DockerMockRecorder) ContainerLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLogs", reflect.TypeOf((*Docker)(nil).ContainerLogs), arg0, arg1, arg2)
}

// ContainerList mocks base method
func (m *Docker) ContainerList(arg0 context.Context, arg1 types.ContainerListOptions) ([]types.Container, error) {
	ret := m.ctrl.Call(m, "ContainerList", arg0, arg1)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerList indicates an expected call of ContainerList
func (mr *DockerMockRecorder) ContainerList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*Docker)(nil).ContainerList), arg0, arg1)
}

// ContainerExecCreate mocks base method
func (m *Docker) ContainerExecCreate(arg0 context.Context, arg1 string, arg2 types.ExecConfig) (types.IDResponse, error) {
	ret := m.ctrl.Call(m, "ContainerExecCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExecCreate indicates an expected call of ContainerExecCreate
func (mr *DockerMockRecorder) ContainerExecCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecCreate", reflect.TypeOf((*Docker)(nil).ContainerExecCreate), arg0, arg1, arg2)
}

// ContainerExecStart mocks base method
func (m *Docker) ContainerExecStart(arg0 context.Context, arg1 string, arg2 types.ExecStartCheck) error {
	ret := m.ctrl.Call(m, "ContainerExecStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerExecStart indicates an expected call of ContainerExecStart
func (mr *DockerMockRecorder) ContainerExecStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecStart", reflect.TypeOf((*Docker)(nil).ContainerExecStart), arg0, arg1, arg2)
}

// ContainerExecInspect mocks base method
func (m *Docker) ContainerExecInspect(arg0 context.Context, arg1 string) (types.ContainerExecInspect, error) {
	ret := m.ctrl.Call(m, "ContainerExecInspect", arg0, arg1)
	ret0, _ := ret[0].(types.ContainerExecInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExecInspect indicates an expected call of ContainerExecInspect
func (mr *DockerMockRecorder) ContainerExecInspect(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecInspect", reflect.TypeOf((*Docker)(nil).ContainerExecInspect), arg0, arg1)
}

// ContainerRemove mocks base method
func (m *Docker) ContainerRemove(arg0 context.Context, arg1 string, arg2 types.ContainerRemoveOptions) error {
	ret := m.ctrl.Call(m, "ContainerRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove
func (mr *DockerMockRecorder) ContainerRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*Docker)(nil).ContainerRemove), arg0, arg1, arg2)
}

// ImagePull mocks base method
func (m *Docker) ImagePull(arg0 context.Context, arg1 string, arg2 types.ImagePullOptions) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "ImagePull", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagePull indicates an expected call of ImagePull
func (mr *DockerMockRecorder) ImagePull(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePull", reflect.TypeOf((*Docker)(nil).ImagePull), arg0, arg1, arg2)
}

// ImageInspectWithRaw mocks base method
func (m *Docker) ImageInspectWithRaw(arg0 context.Context, arg1 string) (types.ImageInspect, []byte, error) {
	ret := m.ctrl.Call(m, "ImageInspectWithRaw", arg0, arg1)
	ret0, _ := ret[0].(types.ImageInspect)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageInspectWithRaw indicates an expected call of ImageInspectWithRaw
func (mr *DockerMockRecorder) ImageInspectWithRaw(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageInspectWithRaw", reflect.TypeOf((*Docker)(nil).ImageInspectWithRaw), arg0, arg1)
}
